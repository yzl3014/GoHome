<template>
  <div class="page">
    <image
      src="../../common/back.png"
      style="position: absolute; left: 6px; top: 6px; width: 72px; height: 72px"
      @click="goBack()"
    ></image>
    <image
      src="../../common/settings.png"
      style="position: absolute; left: 258px; top: 6px; width: 72px; height: 72px"
      @click="toSettings()"
    ></image>
    <text class="clock">{{ clock }}</text>
    <text class="title">GoHome</text>
    <div class="main">
      <div class="card">
        <text class="timer greenA">{{ timer1 }}</text>
        <text class="prompt">天:时:分:秒</text>
      </div>
      <div class="card">
        <text class="timer greenB">{{ timer2 }}</text>
        <text class="prompt">小时</text>
      </div>
    </div>
    <text class="coders">@yzl3014 @无源流沙</text>
  </div>
</template>

<script>
import router from "@system.router"
import storage from "@system.storage"

function calculateTimeDifference(targetTimeStr) {
  // 解析输入时间（北京时间），添加时区标记
  const targetTime = new Date(targetTimeStr + "+08:00")
  // 获取当前时间（系统自动处理时区）
  const now = new Date()

  // 计算时间差（毫秒）
  const diff = Math.abs(now - targetTime)

  // 1. 计算并格式化天:时:分:秒
  const totalSeconds = Math.floor(diff / 1000)
  const days = Math.floor(totalSeconds / (3600 * 24))
  const hours = Math.floor((totalSeconds % (3600 * 24)) / 3600)
  const minutes = Math.floor((totalSeconds % 3600) / 60)
  const seconds = totalSeconds % 60
  const formattedTime = `${days}:${hours.toString().padStart(2, "0")}:${minutes
    .toString()
    .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`

  // 2. 计算并格式化保留2位小数的小时数
  const totalHours = diff / (1000 * 3600)
  const formattedHours = totalHours.toFixed(3)

  return [formattedTime, formattedHours]
}

export default {
  private: {
    clock: "09:28",
    targetTime: "2025-01-01T00:00:00",
    timer1: "",  // 格式为"天:时:分:秒"
    timer2: "",  // 小时，保留三位小数
    interval: null,  // 更新倒计时的定时器
    useDefaultTime: false  // 是否使用的是默认时间
  },
  onInit() {
    // 时钟
    const now = new Date()
    this.clock = `${now.getHours().toString().padStart(2, "0")}:${now
      .getMinutes()
      .toString()
      .padStart(2, "0")}`
    setInterval(() => {
      const now = new Date()
      this.clock = `${now.getHours().toString().padStart(2, "0")}:${now
        .getMinutes()
        .toString()
        .padStart(2, "0")}`
    }, 1000)
  },
  onShow() {
    // 用户有可能到设置里面修改了时间，因此页面加载时需要更新
    this.update()
  },
  update() {
    clearInterval(this.interval)  // 清除现有定时器，防止重复运行
    storage.get({
      key: "TargetTime",
      default: "2025-01-01T00:00:00",
      success: (data) => {
        this.useDefaultTime = data == "2025-01-01T00:00:00"
        this.targetTime = data
        console.info("时间获取成功", data)
        let that = this
        this.interval = setInterval(() => {
          const timeDiff = calculateTimeDifference(that.targetTime)
          that.timer1 = timeDiff[0]
          that.timer2 = timeDiff[1]
          console.log(timeDiff)
        }, 1000)
      },
      fail: (data, code) => {
        prompt.showToast({message: `本地数据获取失败(${code}):${data}`})
      }
    })
  },
  toSettings() {
    let target
    if (this.useDefaultTime) {
      target = new Date()
    } else {
      target = new Date(this.targetTime)
    }
    const hms =
      target.getHours().toString().padStart(2, "0") +
      ":" +
      target.getMinutes().toString().padStart(2, "0")
    router.push({
      uri: "pages/settings",
      params: {
        clock: this.clock,
        timepicker: hms  // picker甚至无法在onInit中修改，只能提前一步
      }
    })
  },
  goBack() {
    router.back()
  }
}
</script>

<style>
.page {
  width: 336px;
  height: 480px;
  color: #fff;
  background-color: #000;
  flex-direction: column;
}
.clock {
  position: absolute;
  left: 77px;
  top: 7px;
  width: 182px;
  height: 34px;
  font-size: 24px;
  font-weight: 600;
  line-height: 33.6px;
  color: rgb(154, 154, 154);
  text-align: center;
}
.title {
  position: absolute;
  left: 77px;
  top: 35px;
  width: 182px;
  height: 45px;
  font-size: 32px;
  font-weight: 500;
  line-height: 44.8px;
  color: rgb(255, 255, 255);
  text-align: center;
}
.main {
  left: 6px;
  top: 82px;
  width: 324px;
  height: 387px;
  flex-direction: column;
}

.card {
  flex-direction: column;
  width: 324px;
  min-height: 106px;
  padding: 15px;
  margin-bottom: 5px;
  border-radius: 26px;
  background-color: rgb(38, 38, 38);
}

.timer {
  width: 294px;
  height: 64px;
  line-height: 63.65px;
  text-align: center;
}

.greenA {
  font-size: 43px;
  color: rgb(165, 214, 63);
}

.greenB {
  font-size: 48px;
  color: rgb(67, 207, 124);
}
.prompt {
  width: 294px;
  height: 28px;
  font-size: 24px;
  font-weight: 400;
  line-height: 21.22px;
  color: rgb(255, 255, 255);
  text-align: center;
}
.coders {
  position: absolute;
  left: 5px;
  top: 445px;
  width: 324px;
  height: 32px;
  font-size: 24px;
  font-weight: 400;
  color: rgb(255, 255, 255);
  text-align: center;
}
</style>
